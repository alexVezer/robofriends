{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAiBeA,EAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OACC,yBAAKC,UAAU,iDACd,yBAAKC,IAAI,OAAOC,IAAG,8CAAyCH,KAC5D,6BACC,gCAAMF,EAAN,KACA,+BAAKC,EAAL,QCeWK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACnB,OACC,kBAAC,EAAD,CACCC,IAAMD,EACNR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCANW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAW,OACf,2BACCA,UAAY,mCACZY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCCI,EARA,SAACC,GACf,OACC,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEJ,EAAMK,WCgBKC,E,YAnBd,WAAYN,GAAQ,IAAD,8BAClB,4CAAMA,KACDO,MAAQ,CACZC,UAAU,GAHO,E,+EAOFC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAI3B,OAAGG,KAAKJ,MAAMC,SACN,2DAEFG,KAAKX,MAAMK,a,GAhBSQ,aCkDZC,G,kBA1Cb,aAAe,IAAD,8BACd,+CAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,QACzCC,QAAQC,IAAIJ,EAAMC,OAAOC,QAdzB,EAAKX,MAAQ,CACZnB,OAAQ,GACRM,YAAa,IAJA,E,iFAQK,IAAD,OACnB2B,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACxB,OAAQqC,S,+BAQ7B,IAAD,OACFC,EAAiBf,KAAKJ,MAAMnB,OAAOuC,QAAO,SAAAvC,GAC9C,OAAOA,EAAOP,KAAK+C,cAAcC,SAAS,EAAKtB,MAAMb,YAAYkC,kBAGnE,OAAgC,IAA7BjB,KAAKJ,MAAMnB,OAAO0C,OACb,yCAGP,yBAAK9C,UAAY,MAChB,wBAAIA,UAAU,MAAd,kBACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQsC,W,GAlCNb,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAE,EAAF,MAAWC,SAASC,eAAe,SDyH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.d5aaa4d5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\n\treturn (\n\t\t<div className='tc bg-grey dib br3 -pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robo' src={`https://lorempixel.com/200/200/food/${id}`} />\n\t\t\t<div>\n\t\t\t\t<h2> {name} </h2>\n\t\t\t\t<p>\t{email} </p>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n\t\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user,i) => {\n\t\treturn (\n\t\t\t<Card \n\t\t\t\tkey ={i} \n\t\t\t\tid={robots[i].id} \n\t\t\t\tname={robots[i].name} \n\t\t\t\temail={robots[i].email}\n\t\t\t\t/>\n\t\t\t\t);\n\t\t\t\t}) \n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn (\n\t\t<div className= 'pa2'>\n\t\t\t<input\n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue' \n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search recipe' \n\t\t\t\tonChange={searchChange}\t\n\t\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style = {{overflowY: 'scroll', border: '3px solid black', height: '800px'}} >\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React , {Component } from 'react';\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\ncomponentDidCatch(error, info) {\n\tthis.setState({ hasError:  true })\n}\n\nrender () {\n\tif(this.state.hasError) {\n\t\treturn <h1> Oooops. This is not good. </h1>\n\t}\nreturn this.props.children\n}\n}\n\nexport default ErrorBoundry;","\nimport React, { Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll.js';\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './app.css';\n\nclass App extends Component {\n\t\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\ncomponentDidMount() {\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(users => this.setState({robots: users}))\n}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value})\n\t\tconsole.log(event.target.value);\t\n\t}\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robots => {\n\t\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t\t})\n\t\t\n\t\tif(this.state.robots.length === 0) {\n\t\t\treturn <h1> Loading </h1>\n\t\t} else { \n\t\treturn (\n\t\t\t<div className = 'tc'>\n\t\t\t\t<h1 className='f1'>CookingFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(< App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}